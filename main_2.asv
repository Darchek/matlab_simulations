
addpath('crc32');
addpath('modulations');
addpath('sample_files');
addpath('arq_methods/no_method');
addpath('arq_methods/stop_and_wait');

global MODULATION;
global PACKET_LENGTH;
global N;
global MAX_COUNT;
    
N = 10^5;
PACKET_LENGTH = 96;         % bytes
MODULATION = '16QAM';         % OOK, QPSK, 16QAM, 64QAM
MAX_COUNT = 25;
EbNodB = -10:1:30;

% ARQ
%       send_message_no_arq
%       send_message_stop_and_waitcm
bler_theoric = zeros(1, length(EbNodB));
retry_theoric = zeros(1, length(EbNodB));
bler_simulat = zeros(1, length(EbNodB));
retry_simulat = zeros(1, length(EbNodB));
min_ebn0 = 0;
max_ebn0 = 0;

for n = 1:length(EbNodB)
    
    bler_theoric(n) = calc_PER(EbNodB(n));
    retry_theoric(n) = 1 / (1 - bler_theoric(n));
    
    if bler_theoric(n) < 1 && bler_theoric(n) > 10^-15

        [p_goods, p_bad, retry_simulat(n)] = send_message_no_arq(EbNodB(n));
        
%         bler_simulat(n) = (p_wrong / (p_correct + p_wrong));

        disp(['EbNo(dB): ', num2str(EbNodB(n)), ' - Retrys: ', num2str(retry_simulat(n)), ' - Retrys_Threorical: ', num2str(retry_theoric(n))]);
         
    elseif bler_theoric(n) >= 1
        min_ebn0 = EbNodB(n);
        retry_simulat(n) = 0;
    elseif bler_theoric(n) <= 10^-15
        max_ebn0 = EbNodB(n);
        disp(['EbNo(dB): ', num2str(EbNodB(n)), ' - Nothing']);
        break;
    end

end

close all;
figure;
semilogy(EbNodB, retry_theoric, 'LineWidth', 1);
hold on;
semilogy(EbNodB, retry_simulat, 'LineWidth', 1);
% axis([min_ebn0 max_ebn0 0 1]);
grid on;
legend('Theoric', 'Simulation');
xlabel('Eb/No, dB');
ylabel('BLER'); 
% title(['BLER - ', MODULATION ]);
title(['Retrys - ', MODULATION, ' - STOP & WAIT - COUNT = ', num2str(MAX_COUNT)]);




